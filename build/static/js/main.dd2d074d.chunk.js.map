{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","contacts","setContacts","fullName","address","phoneNumber","email","addFormData","setAddFormData","handleAddFormChange","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","className","map","contact","type","name","required","placeholder","onChange","onClick","newContact","id","nanoid","newContacts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQA+FeA,EA1FH,WAAO,IAAD,EACgBC,mBAASC,GADzB,mBACTC,EADS,KACCC,EADD,OAEsBH,mBAAS,CAC7CI,SAAU,GACVC,QAAS,GACTC,YAAa,GACbC,MAAO,KANO,mBAETC,EAFS,KAEIC,EAFJ,KASVC,EAAsB,SAACC,GAC3BA,EAAMC,iBAEN,IAAMC,EAAYF,EAAMG,OAAOC,aAAa,QACtCC,EAAaL,EAAMG,OAAOG,MAE1BC,EAAW,eAAQV,GACzBU,EAAYL,GAAaG,EAEzBP,EAAeS,IAkBjB,OACE,sBAAKC,UAAU,gBAAf,UACE,kCACE,gCACE,+BACE,sCACA,yCACA,8CACA,4CAGJ,gCACGjB,EAASkB,KAAI,SAACC,GAAD,OACZ,+BACE,6BAAKA,EAAQjB,WACb,6BAAKiB,EAAQhB,UACb,6BAAKgB,EAAQf,cACb,6BAAKe,EAAQd,mBAIrB,+CACA,iCACE,uBACEe,KAAK,OACLC,KAAK,WACLC,SAAS,WACTC,YAAY,kBACZC,SAAUhB,IACZ,uBACEY,KAAK,OACLC,KAAK,UACLC,SAAS,WACTC,YAAY,sBACZC,SAAUhB,IACZ,uBACEY,KAAK,OACLC,KAAK,cACLC,SAAS,WACTC,YAAY,0BACZC,SAAUhB,IACZ,uBACEY,KAAK,QACLC,KAAK,QACLC,SAAS,WACTC,YAAY,oBACZC,SAAUhB,IAEZ,wBAAQY,KAAK,SAASK,QA/DA,SAAChB,GAC3BA,EAAMC,iBAEN,IAAMgB,EAAa,CACjBC,GAAIC,cACJ1B,SAAUI,EAAYJ,SACtBC,QAASG,EAAYH,QACrBC,YAAaE,EAAYF,YACzBC,MAAOC,EAAYD,OAGfwB,EAAW,sBAAO7B,GAAP,CAAiB0B,IAClCzB,EAAY4B,IAmDR,wBC7EOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.dd2d074d.chunk.js","sourcesContent":["import { nanoid } from 'nanoid'\r\nimport React, { useState } from 'react'\r\nimport \"./App.css\"\r\nimport data from \"./mock-data.json\" //pretend we call an api\r\n\r\nconst App = () => {\r\n  const [contacts, setContacts] = useState(data)\r\n  const [addFormData, setAddFormData] = useState({\r\n    fullName: '',\r\n    address: '',\r\n    phoneNumber: '',\r\n    email: ''\r\n  })\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    const fieldName = event.target.getAttribute('name')\r\n    const fieldValue = event.target.value\r\n\r\n    const newFormData = { ...addFormData }\r\n    newFormData[fieldName] = fieldValue\r\n\r\n    setAddFormData(newFormData)\r\n  }\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    const newContact = {\r\n      id: nanoid(), //generates an id\r\n      fullName: addFormData.fullName,\r\n      address: addFormData.address,\r\n      phoneNumber: addFormData.phoneNumber,\r\n      email: addFormData.email\r\n    }\r\n\r\n    const newContacts = [...contacts, newContact]\r\n    setContacts(newContacts)\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Address</th>\r\n            <th>Phone Number</th>\r\n            <th>Email</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {contacts.map((contact) =>\r\n            <tr>\r\n              <td>{contact.fullName}</td>\r\n              <td>{contact.address}</td>\r\n              <td>{contact.phoneNumber}</td>\r\n              <td>{contact.email}</td>\r\n            </tr>)}\r\n        </tbody>\r\n      </table>\r\n      <h2>Add a Contact</h2>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name...\"\r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"text\"\r\n          name=\"address\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an address...\" \r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"text\"\r\n          name=\"phoneNumber\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phone number...\"\r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email...\" \r\n          onChange={handleAddFormChange} />\r\n        \r\n        <button type=\"submit\" onClick={handleAddFormSubmit}>Add</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}