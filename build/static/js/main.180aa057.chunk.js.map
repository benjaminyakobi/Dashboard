{"version":3,"sources":["initFirebase.jsx","App.js","reportWebVitals.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getAuth","getDatabase","App","listsRef","ref","useState","contacts","setContacts","fullName","address","phoneNumber","email","addFormData","setAddFormData","useEffect","onValue","snapshot","jsonObject","val","listObject","Object","values","console","log","handleAddFormChange","event","preventDefault","fieldName","target","getAttribute","fieldValue","value","newFormData","className","map","contact","id","type","name","required","placeholder","onChange","onClick","newContact","nanoid","newChildRef","push","set","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAeQA,EAAMC,YAXW,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yEACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKXC,GADOC,YAAQX,GACVY,YAAYZ,I,OCsGVa,EA/GH,WACV,IAAMC,EAAWC,YAAIL,EAAI,SACzB,EAAgCM,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,CAC7CG,SAAU,GACVC,QAAS,GACTC,YAAa,GACbC,MAAO,KAJT,mBAAOC,EAAP,KAAoBC,EAApB,KAQAC,qBAAU,WACRC,YAAQZ,GAAU,SAACa,GACjB,IAAMC,EAAaD,EAASE,MAC5B,IACE,IAAMC,EAAaC,OAAOC,OAAOJ,GACjCV,EAAYY,GAEd,SACEG,QAAQC,IAAI,2BAGf,IAEH,IAAMC,EAAsB,SAACC,GAC3BA,EAAMC,iBAEN,IAAMC,EAAYF,EAAMG,OAAOC,aAAa,QACtCC,EAAaL,EAAMG,OAAOG,MAE1BC,EAAW,eAAQpB,GACzBoB,EAAYL,GAAaG,EAEzBjB,EAAemB,IAwBjB,OACE,sBAAKC,UAAU,gBAAf,UACE,kCACE,gCACE,+BACE,sCACA,yCACA,8CACA,4CAGJ,gCACG3B,EAAS4B,KAAI,SAACC,GAAD,OACZ,+BACE,6BAAKA,EAAQ3B,WACb,6BAAK2B,EAAQ1B,UACb,6BAAK0B,EAAQzB,cACb,6BAAKyB,EAAQxB,UAJNwB,EAAQC,YAQvB,+CACA,iCACE,uBACEC,KAAK,OACLC,KAAK,WACLC,SAAS,WACTC,YAAY,kBACZC,SAAUjB,IACZ,uBACEa,KAAK,OACLC,KAAK,UACLC,SAAS,WACTC,YAAY,sBACZC,SAAUjB,IACZ,uBACEa,KAAK,OACLC,KAAK,cACLC,SAAS,WACTC,YAAY,0BACZC,SAAUjB,IACZ,uBACEa,KAAK,QACLC,KAAK,QACLC,SAAS,WACTC,YAAY,oBACZC,SAAUjB,IAEZ,wBAAQa,KAAK,QAAQK,QArEC,SAACjB,GAC3BA,EAAMC,iBACN,IAAMiB,EAAa,CACjBP,GAAIQ,cACJpC,SAAUI,EAAYJ,SACtBC,QAASG,EAAYH,QACrBC,YAAaE,EAAYF,YACzBC,MAAOC,EAAYD,OAIfkC,EAAcC,YAAK3C,GACzB4C,YAAIF,EAAaF,GAEjB5B,YAAQZ,GAAU,SAACa,GACjB,IAAMC,EAAaD,EAASE,MACtBC,EAAaC,OAAOC,OAAOJ,GACjCV,EAAYY,OAoDV,wBCrGO6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.180aa057.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase } from \"firebase/database\"\r\n\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyBhiHbrO2qUvGDmGN3iX5u-SlpRK_EPlzU\",\r\n    authDomain: \"table-app-e64c3.firebaseapp.com\",\r\n    databaseURL: \"https://table-app-e64c3-default-rtdb.europe-west1.firebasedatabase.app\",\r\n    projectId: \"table-app-e64c3\",\r\n    storageBucket: \"table-app-e64c3.appspot.com\",\r\n    messagingSenderId: \"102169979497\",\r\n    appId: \"1:102169979497:web:c8dc8170bd6ce50f4850f8\",\r\n    measurementId: \"G-6RC7ZQ1177\"\r\n  };\r\n\r\n  const app = initializeApp(firebaseConfig)\r\n  const auth = getAuth(app)\r\n  const db = getDatabase(app)\r\n  \r\n  export { auth, db }","import \"./App.css\"\r\nimport { nanoid } from 'nanoid'\r\nimport React, { useState, useEffect } from 'react'\r\n// import data from \"./mock-data.json\" //pretend we call an api\r\nimport { db } from \"./initFirebase\"\r\nimport { ref, push, set, onValue } from \"firebase/database\"\r\n\r\n\r\nconst App = () => {\r\n  const listsRef = ref(db, 'Lists') //Getting a reference to 'Lists' in Firebase-RT-DB\r\n  const [contacts, setContacts] = useState([])\r\n  const [addFormData, setAddFormData] = useState({\r\n    fullName: '',\r\n    address: '',\r\n    phoneNumber: '',\r\n    email: ''\r\n  })\r\n\r\n  //Loading data from Firebase-Realtime-Database\r\n  useEffect(() => {\r\n    onValue(listsRef, (snapshot) => {\r\n      const jsonObject = snapshot.val() //Getting each child value under 'Lists' as a json object\r\n      try{\r\n        const listObject = Object.values(jsonObject) //Convert a json object to a list of jsons\r\n        setContacts(listObject) //Updating state: 'contacts' using setContacts\r\n      }\r\n      catch{\r\n        console.log(\"Database is empty\")\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    const fieldName = event.target.getAttribute('name')\r\n    const fieldValue = event.target.value\r\n\r\n    const newFormData = { ...addFormData }\r\n    newFormData[fieldName] = fieldValue\r\n\r\n    setAddFormData(newFormData)\r\n  }\r\n\r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newContact = {\r\n      id: nanoid(), //Generates an id\r\n      fullName: addFormData.fullName,\r\n      address: addFormData.address,\r\n      phoneNumber: addFormData.phoneNumber,\r\n      email: addFormData.email\r\n    }\r\n\r\n    //Inserting new object to Firebase-RT-DB\r\n    const newChildRef = push(listsRef); //Generating new child under 'Lists'\r\n    set(newChildRef, newContact); //Setting new object into the new child (newChildRef)\r\n\r\n    onValue(listsRef, (snapshot) => {\r\n      const jsonObject = snapshot.val() //Getting each child value under 'Lists' as a json object\r\n      const listObject = Object.values(jsonObject) //Convert a json object to a list of jsons\r\n      setContacts(listObject) //Updating state: 'contacts' using setContacts\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"app-container\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Name</th>\r\n            <th>Address</th>\r\n            <th>Phone Number</th>\r\n            <th>Email</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {contacts.map((contact) =>\r\n            <tr key={contact.id}>\r\n              <td>{contact.fullName}</td>\r\n              <td>{contact.address}</td>\r\n              <td>{contact.phoneNumber}</td>\r\n              <td>{contact.email}</td>\r\n            </tr>)}\r\n        </tbody>\r\n      </table>\r\n      <h2>Add a Contact</h2>\r\n      <form>\r\n        <input\r\n          type=\"text\"\r\n          name=\"fullName\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a name...\"\r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"text\"\r\n          name=\"address\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an address...\"\r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"text\"\r\n          name=\"phoneNumber\"\r\n          required=\"required\"\r\n          placeholder=\"Enter a phone number...\"\r\n          onChange={handleAddFormChange} />\r\n        <input\r\n          type=\"email\"\r\n          name=\"email\"\r\n          required=\"required\"\r\n          placeholder=\"Enter an email...\"\r\n          onChange={handleAddFormChange} />\r\n\r\n        <button type=\"reset\" onClick={handleAddFormSubmit}>Add</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}