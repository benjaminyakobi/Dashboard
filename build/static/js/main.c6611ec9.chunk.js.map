{"version":3,"sources":["initFirebase.jsx","components/contexts/AuthContext.js","components/Login.js","components/Signup.js","components/ReadOnlyRow.js","components/EditableRow.js","components/Dashboard.js","components/PrivateRoute.js","components/ForgotPassword.js","components/UpdateEmail.js","components/App.js","index.js"],"names":["app","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","getAuth","db","getDatabase","AuthContext","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","signup","email","password","createUserWithEmailAndPassword","login","signInWithEmailAndPassword","logout","signOut","resetPassword","sendPasswordResetEmail","updatedEmail","updateEmail","updatedPassword","updatePassword","Provider","Login","emailRef","useRef","passwordRef","error","setError","history","useHistory","event","a","preventDefault","current","then","push","catch","console","log","Card","Body","className","Alert","variant","Form","onSubmit","Group","id","Label","Control","type","ref","required","Button","disabled","to","Signup","passwordConfirmRef","ReadOnlyRow","contact","handleEditClick","handleDeleteClick","fullName","address","phoneNumber","onClick","EditableRow","addFormData","handleEditFormChange","handleCancelClick","name","placeholder","onChange","Dashboard","listsRef","uid","contacts","setContacts","editContactId","setEditContactId","setAddFormData","onValue","snapshot","jsonObject","val","listObject","Object","values","handleAddFormChange","fieldName","target","getAttribute","fieldValue","newFormData","formData","contactId","get","exists","entries","key","updates","update","style","width","marginTop","updatedContact","map","newContact","nanoid","newChildRef","set","PrivateRoute","Component","component","rest","render","props","ForgotPassword","message","setMessage","UpdateEmail","promises","Promise","all","finally","defaultValue","App","Container","path","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6611ec9.chunk.js","sourcesContent":["import { initializeApp } from \"firebase/app\"\r\nimport { getAuth } from \"firebase/auth\"\r\nimport { getDatabase } from \"firebase/database\"\r\n\r\n  const firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n    measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\r\n  };\r\n\r\n  const app = initializeApp(firebaseConfig)\r\n  const auth = getAuth(app)\r\n  const db = getDatabase(app)\r\n  \r\n  export { auth, db }","import React, { createContext, useContext, useState, useEffect } from 'react'\r\nimport { auth } from '../../initFirebase'\r\nimport { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateEmail, updatePassword } from \"firebase/auth\"\r\n\r\nconst AuthContext = createContext()\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext)\r\n    // In order to use AuthContext.Provider value (i.e. AuthContext.Consumer)\r\n    // we have to export it as: useContext(AuthContext) because we're using \r\n    // Functional Components. These way is relevent ONLY for functional components\r\n    // and in class components we just use AuthContext.Consumer\r\n    // WE PASS Context INSIDE useContext -> WE GET THE VALUE OF THE Inner-Context\r\n    // Detailed explain: https://www.youtube.com/watch?v=5LrDIWkK_Bc\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [currentUser, setCurrentUser] = useState()\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    function signup(email, password) {\r\n        return createUserWithEmailAndPassword(auth, email, password)\r\n    }\r\n\r\n    function login(email, password) {\r\n        return signInWithEmailAndPassword(auth, email, password)\r\n    }\r\n\r\n    function logout() {\r\n        signOut(auth)\r\n    }\r\n\r\n    function resetPassword(email) {\r\n        return sendPasswordResetEmail(auth, email)\r\n    }\r\n\r\n    function updatedEmail(email) {\r\n        return updateEmail(currentUser, email)\r\n    }\r\n\r\n    function updatedPassword(password) {\r\n        return updatePassword(currentUser, password)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = auth.onAuthStateChanged(user => {\r\n            setCurrentUser(user)\r\n            setLoading(false)\r\n        })\r\n\r\n        return unsubscribe\r\n\r\n    }, [])\r\n\r\n    const value = {\r\n        currentUser,\r\n        signup,\r\n        login,\r\n        logout,\r\n        resetPassword,\r\n        updatedEmail,\r\n        updatedPassword\r\n    }\r\n    return (\r\n        <AuthContext.Provider value={value}>\r\n            {/* if not loading (i.e. current user is loaded) -> render the children it means that we are not rendering anything\r\n            until our current user is set*/}\r\n            {!loading && children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../components/contexts/AuthContext'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nexport default function Login() {\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const { login } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        setError('')\r\n        setLoading(true)\r\n        await login(emailRef.current.value, passwordRef.current.value)\r\n            .then(() => {\r\n                setLoading(false)\r\n                history.push('/dashboard')\r\n            })\r\n            .catch(error => {\r\n                setError('Failed to log in')\r\n                setLoading(false)\r\n                console.log(error)\r\n            })\r\n    }\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h2 className='text-center mb-4'>Log In</h2>\r\n                    {error && <Alert variant='danger'>{error}</Alert>}\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group id='email'>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type='email' ref={emailRef} required />\r\n                        </Form.Group>\r\n                        <Form.Group id='password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' ref={passwordRef} required />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className='w-100 mt-3' type='submit'>Log In</Button>\r\n                    </Form>\r\n                    <div className='w-100 text-center mt-3'>\r\n                        <Link to='/forgot-password'>Forgot Password?</Link>\r\n                    </div>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            <div className='w-100 text-center mt-2'>\r\n                Need an account? <Link to='/signup'>Sign Up</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../components/contexts/AuthContext'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n\r\nexport default function Signup() {\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { signup } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError('Passwords do not match')\r\n        }\r\n        try {\r\n            setError('')\r\n            setLoading(true)\r\n            await signup(emailRef.current.value, passwordRef.current.value) //if the signup fails -> go to catch block\r\n            setLoading(false)\r\n            history.push('/')\r\n        } catch {\r\n            setError('Failed to create an account')\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h2 className='text-center mb-4'>Sign Up</h2>\r\n                    {error && <Alert variant='danger'>{error}</Alert>}\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group id='email'>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type='email' ref={emailRef} required />\r\n                        </Form.Group>\r\n                        <Form.Group id='password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' ref={passwordRef} required />\r\n                        </Form.Group>\r\n                        <Form.Group id='password-confirm'>\r\n                            <Form.Label>Password Confirmation</Form.Label>\r\n                            <Form.Control type='password' ref={passwordConfirmRef} required />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className='w-100 mt-3' type='submit'>Sign Up</Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n            <div className='w-100 text-center mt-2'>\r\n                Already have an account? <Link to='/'>Log In</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\nfunction ReadOnlyRow({ contact, handleEditClick, handleDeleteClick }) {\r\n    return (\r\n        <tr>     \r\n            <td>{contact.fullName}</td>\r\n            <td>{contact.address}</td>\r\n            <td>{contact.phoneNumber}</td>\r\n            <td>{contact.email}</td>\r\n            <td>\r\n                <button type='button' onClick={(event) => handleEditClick(event, contact)}>Edit</button>\r\n                <button type='button' onClick={() => handleDeleteClick(contact.id)}>Delete</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default ReadOnlyRow\r\n\r\n","import React from 'react'\r\n\r\nconst EditableRow = ({ addFormData, handleEditFormChange, handleCancelClick }) => {\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"fullName\"\r\n                    required=\"required\"\r\n                    placeholder=\"Enter a name...\"\r\n                    value={addFormData.fullName}\r\n                    onChange={handleEditFormChange} />\r\n            </td>\r\n            <td>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"address\"\r\n                    required=\"required\"\r\n                    placeholder=\"Enter an address...\"\r\n                    value={addFormData.address}\r\n                    onChange={handleEditFormChange} />\r\n            </td>\r\n            <td>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"phoneNumber\"\r\n                    required=\"required\"\r\n                    placeholder=\"Enter a phone number...\"\r\n                    value={addFormData.phoneNumber}\r\n                    onChange={handleEditFormChange} />\r\n            </td>\r\n            <td>\r\n                <input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    required=\"required\"\r\n                    placeholder=\"Enter an email...\"\r\n                    value={addFormData.email}\r\n                    onChange={handleEditFormChange} />\r\n            </td>\r\n            <td>\r\n                <button type='submit'>Save</button>\r\n                <button type='button' onClick={handleCancelClick}>Cancel</button>\r\n            </td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default EditableRow\r\n","import \"../App.css\"\r\nimport { nanoid } from 'nanoid'\r\nimport React, { useState, useEffect, Fragment } from 'react'\r\nimport { db } from \"../initFirebase\"\r\nimport { ref, push, set, update, onValue, get } from \"firebase/database\"\r\nimport { useAuth } from './contexts/AuthContext'\r\nimport { Button, Card } from 'react-bootstrap'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport ReadOnlyRow from \"./ReadOnlyRow\"\r\nimport EditableRow from \"./EditableRow\"\r\n\r\n\r\nconst Dashboard = () => {\r\n  const { currentUser, logout } = useAuth() //For firebase authentication\r\n  const [error, setError] = useState('') //For errors\r\n  const history = useHistory() //For routing between components\r\n  const listsRef = ref(db, `Lists/${currentUser.uid}`) //Getting a reference to 'Lists' in Firebase-RT-DB\r\n  const [contacts, setContacts] = useState([]) //For rendeting contacts that fetched from firebase\r\n  const [editContactId, setEditContactId] = useState(null) //For editing rows\r\n  const [addFormData, setAddFormData] = useState({\r\n    fullName: '',\r\n    address: '',\r\n    phoneNumber: '',\r\n    email: ''\r\n  })\r\n\r\n\r\n  /* FIREBASE REALTIME DATABASE */ \r\n  //Loading data from Firebase-Realtime-Database\r\n  useEffect(() => {\r\n    onValue(listsRef, (snapshot) => {\r\n      const jsonObject = snapshot.val() //Getting each child value under 'Lists' as a json object\r\n      try {\r\n        setError('')\r\n        const listObject = Object.values(jsonObject) //Convert a json object to a list of jsons\r\n        setContacts(listObject) //Updating state: 'contacts' using setContacts\r\n      }\r\n      catch {\r\n        setError(\"Database is empty\")\r\n        console.log(error)\r\n      }\r\n    })\r\n  }, [])\r\n\r\n  async function handleLogout() {\r\n    setError('')\r\n    try {\r\n      await logout()\r\n      history.push('/')\r\n    } catch {\r\n      setError('Failed to log out')\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  /* ADDING DATA TO FIREBASE RTDB */ \r\n  const handleAddFormSubmit = (event) => {\r\n    event.preventDefault()\r\n    const newContact = {\r\n      id: nanoid(), //Generates an id\r\n      fullName: addFormData.fullName,\r\n      address: addFormData.address,\r\n      phoneNumber: addFormData.phoneNumber,\r\n      email: addFormData.email\r\n    }\r\n\r\n    //Inserting new object to Firebase-RT-DB\r\n    const newChildRef = push(listsRef); //Generating new child under 'Lists'\r\n    set(newChildRef, newContact); //Setting new object into the new child (newChildRef)\r\n\r\n    onValue(listsRef, (snapshot) => {\r\n      if (snapshot.exists()) {\r\n        const jsonObject = snapshot.val() //Getting each child value under 'Lists' as a json object\r\n        const listObject = Object.values(jsonObject) //Convert a json object to a list of jsons\r\n        setContacts(listObject) //Updating state: 'contacts' using setContacts\r\n      } else { \r\n        setContacts([])\r\n        console.log('No data available') \r\n      }\r\n    })\r\n  }\r\n\r\n  const handleAddFormChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    const fieldName = event.target.getAttribute('name')\r\n    const fieldValue = event.target.value\r\n\r\n    const newFormData = { ...addFormData }\r\n    newFormData[fieldName] = fieldValue\r\n\r\n    setAddFormData(newFormData)\r\n  }\r\n\r\n  /* EDDITING DATA IN FIREBASE RTDB */ \r\n  const HandleEditFormSubmit = (event) => {\r\n    event.preventDefault()\r\n\r\n    //Updated contact information\r\n    const updatedContact = {\r\n      id: editContactId,\r\n      fullName: addFormData.fullName,\r\n      address: addFormData.address,\r\n      phoneNumber: addFormData.phoneNumber,\r\n      email: addFormData.email\r\n    }\r\n\r\n    get(listsRef)\r\n      .then(snapshot => {\r\n        if (snapshot.exists()) {\r\n          const jsonObject = snapshot.val()\r\n          for (const [key, value] of Object.entries(jsonObject)) {\r\n            if (value['id'] === editContactId) {\r\n              const updates = {}\r\n              updates[key] = updatedContact //Set an updated contact\r\n              return update(listsRef, updates)\r\n            }\r\n          }\r\n        }\r\n        else { console.log('No data available') }\r\n      }).catch(error => { console.log(error) })\r\n\r\n    setEditContactId(null)\r\n  }\r\n\r\n  const handleEditFormChange = (event) => {\r\n    event.preventDefault()\r\n\r\n    const fieldName = event.target.getAttribute('name')\r\n    const fieldValue = event.target.value\r\n\r\n    const newFormData = { ...addFormData }\r\n    newFormData[fieldName] = fieldValue\r\n\r\n    setAddFormData(newFormData)\r\n  }\r\n\r\n  const handleEditClick = (event, contact) => {\r\n    event.preventDefault()\r\n    setEditContactId(contact.id)\r\n\r\n    const formData = {\r\n      fullName: contact.fullName,\r\n      address: contact.address,\r\n      phoneNumber: contact.phoneNumber,\r\n      email: contact.email\r\n    }\r\n\r\n    setAddFormData(formData)\r\n  }\r\n\r\n  const handleCancelClick = () => {\r\n    setEditContactId(null)\r\n  }\r\n\r\n  /* DELETE DATA FROM FIREBASE RTDB */ \r\n  const handleDeleteClick = (contactId) => {\r\n    get(listsRef)\r\n      .then(snapshot => {\r\n        if (snapshot.exists()) {\r\n          const jsonObject = snapshot.val()\r\n          for (const [key, value] of Object.entries(jsonObject)) {\r\n            if (value['id'] === contactId) {\r\n              const updates = {}\r\n              updates[key] = null //Set to null to remove\r\n              setEditContactId(null)\r\n              return update(listsRef, updates)\r\n            }\r\n          }\r\n        }\r\n        else { console.log('No data available') }\r\n      }).catch(error => { console.log(error) })\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <Card.Body className='text-center mt-2'>\r\n          <h6>Email: {currentUser.email}</h6>\r\n          <Link to='/update-email'>Update Email/Password</Link>\r\n          <div>\r\n            <Button variant='link' onClick={handleLogout}>Log Out</Button>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <div style={{ width: '800px', marginTop: 6 }}>\r\n        <form onSubmit={HandleEditFormSubmit}>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Name</th>\r\n                <th>Address</th>\r\n                <th>Phone Number</th>\r\n                <th>Email</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {contacts.map((contact) =>\r\n                <Fragment key={contact.id}>\r\n                  {\r\n                    (contact.id === editContactId) ?\r\n                      <EditableRow addFormData={addFormData} handleEditFormChange={handleEditFormChange} handleCancelClick={handleCancelClick} /> :\r\n                      <ReadOnlyRow contact={contact} handleEditClick={handleEditClick} handleDeleteClick={handleDeleteClick} />\r\n                  }\r\n                </Fragment>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </form>\r\n      </div>\r\n\r\n      <div style={{ width: '800px', marginTop: 6 }}>\r\n        <h3>Add a Contact</h3>\r\n        <form className='form-container'>\r\n          <input\r\n            type=\"text\"\r\n            name=\"fullName\"\r\n            required=\"required\"\r\n            placeholder=\"Enter a name...\"\r\n            onChange={handleAddFormChange} />\r\n          <input\r\n            type=\"text\"\r\n            name=\"address\"\r\n            required=\"required\"\r\n            placeholder=\"Enter an address...\"\r\n            onChange={handleAddFormChange} />\r\n          <input\r\n            type=\"text\"\r\n            name=\"phoneNumber\"\r\n            required=\"required\"\r\n            placeholder=\"Enter a phone number...\"\r\n            onChange={handleAddFormChange} />\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            required=\"required\"\r\n            placeholder=\"Enter an email...\"\r\n            onChange={handleAddFormChange} />\r\n          <button type=\"reset\" onClick={handleAddFormSubmit}>Add</button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dashboard","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { useAuth } from './contexts/AuthContext'\r\n\r\n//Wrapper around the current route\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n    const { currentUser } = useAuth()\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={props => {\r\n                return currentUser ? <Component {...props} /> : <Redirect to='/' />\r\n            }}\r\n        />\r\n    )\r\n}\r\n","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../components/contexts/AuthContext'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function ForgotPassword() {\r\n    const emailRef = useRef()\r\n    const { resetPassword } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [message, setMessage] = useState('')\r\n    async function handleSubmit(event) {\r\n        event.preventDefault()\r\n\r\n        try {\r\n            setMessage('')\r\n            setError('')\r\n            setLoading(true)\r\n            await resetPassword(emailRef.current.value)\r\n            setMessage('Check your inbox for further instructions')\r\n        } catch {\r\n            setError('Failed to reset password')\r\n        }\r\n        setLoading(false)\r\n    }\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h2 className='text-center mb-4'>Password Reset</h2>\r\n                    {error && <Alert variant='danger'>{error}</Alert>}\r\n                    {message && <Alert variant='info'>{message}</Alert>}\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group id='email'>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type='email' ref={emailRef} required />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className='w-100 mt-3' type='submit'>Reset Password</Button>\r\n                    </Form>\r\n                    <div className='w-100 text-center mt-3'>\r\n                        <Link to='/'>Login</Link>\r\n                    </div>\r\n\r\n                </Card.Body>\r\n            </Card>\r\n            <div className='w-100 text-center mt-2'>\r\n                Need an account? <Link to='/signup'>Sign Up</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../components/contexts/AuthContext'\r\nimport { Link, useHistory } from 'react-router-dom'\r\n// import { updateEmail } from 'firebase/auth'\r\n\r\nexport default function UpdateEmail() {\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const { currentUser, updatedEmail, updatedPassword } = useAuth()\r\n    const [error, setError] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    function handleSubmit(event) {\r\n        event.preventDefault()\r\n\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setError('Passwords do not match')\r\n        }\r\n\r\n        const promises = []\r\n        setLoading(true)\r\n        setError('')\r\n        if (emailRef.current.value !== currentUser.email) {\r\n            promises.push(updatedEmail(emailRef.current.value))\r\n        }\r\n\r\n        if (passwordRef.current.value) {\r\n            promises.push(updatedPassword(passwordRef.current.value))\r\n        }\r\n\r\n        Promise.all(promises).then(() => {\r\n            history.push('/dashboard')\r\n        }).catch(() => {\r\n            setError('Failed to update')\r\n        }).finally()\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h2 className='text-center mb-4'>Update Email/Password</h2>\r\n                    {error && <Alert variant='danger'>{error}</Alert>}\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group id='email'>\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type='email' ref={emailRef} required defaultValue={currentUser.email} />\r\n                        </Form.Group>\r\n                        <Form.Group id='password'>\r\n                            <Form.Label>Password</Form.Label>\r\n                            <Form.Control type='password' ref={passwordRef} placeholder='Leave blank to keep the same' />\r\n                        </Form.Group>\r\n                        <Form.Group id='password-confirm'>\r\n                            <Form.Label>Password Confirmation</Form.Label>\r\n                            <Form.Control type='password' ref={passwordConfirmRef} placeholder='Leave blank to keep the same' />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className='w-100 mt-3' type='submit'>Update</Button>\r\n                    </Form>\r\n                </Card.Body>\r\n            </Card>\r\n            <div className='w-100 text-center mt-2'>\r\n                <Link to='/dashboard'>Cancel</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}","import \"../App.css\"\r\nimport React from 'react'\r\nimport { Container } from \"react-bootstrap\"\r\nimport { AuthProvider } from \"./contexts/AuthContext\"\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\r\nimport Login from \"./Login\"\r\nimport Signup from \"./Signup\"\r\nimport Dashboard from './Dashboard'\r\nimport PrivateRoute from \"./PrivateRoute\"\r\nimport ForgotPassword from \"./ForgotPassword\"\r\nimport UpdateEmail from \"./UpdateEmail\"\r\n\r\nconst App = () => {\r\n  return (\r\n    <AuthProvider>\r\n      <Container style={{ width: 'auto' }}>\r\n        <div style={{ width: '400px' }}>\r\n          <Router>\r\n            <AuthProvider>\r\n              <Switch>\r\n                <PrivateRoute path='/dashboard' component={Dashboard} />\r\n                <Route path='/signup' component={Signup} />\r\n                <Route exact path='/' component={Login} />\r\n                <Route path='/forgot-password' component={ForgotPassword} />\r\n                <Route path='/update-email' component={UpdateEmail} />\r\n              </Switch>\r\n            </AuthProvider>\r\n          </Router>\r\n        </div>\r\n      </Container>\r\n    </AuthProvider>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}